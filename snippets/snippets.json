{
  "Initial function component for React": {
    "scope": "javascript,javascriptreact",
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:Component} () {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t<h1>${1:Component}</h1>",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial function component file for React"
  },
  "Initial arrow function component for React": {
    "scope": "javascript,javascriptreact",
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:Component} = () => (",
      "\t<div>",
      "\t\t<h1>${1:Component}</h1>",
      "\t</div>",
      ")",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial arrow function component file for React JUST PRESENTATIONAL"
  },
  "Initial function component with useState for React": {
    "scope": "javascript,javascriptreact",
    "prefix": "rfcs",
    "body": [
      "import React, { useState } from 'react'",
      "",
      "function ${1:Component} () {",
      "\tconst [${2:state}, set${2:state}] = useState('${2:state}')",
      "",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t<h1>${1:Component}</h1>",
      "\t\t\t<span>{${2:state}}</span>",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial function component file with useState for React"
  },
  "Initial arrow function component with useState for React": {
    "scope": "javascript,javascriptreact",
    "prefix": "rafcs",
    "body": [
      "import React, { useState } from 'react'",
      "",
      "const ${1:Component} = () => {",
      "\tconst [${2:state}, set${2:state}] = useState('${2:state}')",
      "",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t<h1>${1:Component}</h1>",
      "\t\t\t<span>{${2:state}}</span>",
      "\t\t</div>",
      "\t)",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial arrow function component file with useState for React"
  },
  "Initial styled-components for React": {
    "scope": "javascript",
    "prefix": "rsc",
    "body": [
      "import styled from 'styled-components'",
      "\t",
      "export const ${1:Container} = styled.${2:div}`",
      "\t$0",
      "`"
    ],
    "description": "Initial styled-components file for React"
  },
  "Initial function component for React Native": {
    "scope": "javascript",
    "prefix": "rnfc",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "function ${1:Component} () {",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>${1:Component}</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial function component file for React Native"
  },
  "Initial arrow function component for React Native": {
    "scope": "javascript",
    "prefix": "rnafc",
    "body": [
      "import React from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:Component} = () => (",
      "\t<View>",
      "\t\t<Text>${1:Component}</Text>",
      "\t</View>",
      ")",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial arrow function component file for React Native"
  },
  "Initial function component with useState for React Native": {
    "scope": "javascript",
    "prefix": "rnfcs",
    "body": [
      "import React, { useState } from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "function ${1:Component} () {",
      "\tconst [${2:state}, set${2:state}] = useState('${2:state}')",
      "",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>${1:Component}</Text>",
      "\t\t\t<Text>{${2:state}}</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial function component file with useState for React Native"
  },
  "Initial arrow function component with useState for React Native": {
    "scope": "javascript",
    "prefix": "rnafcs",
    "body": [
      "import React, { useState } from 'react'",
      "import { View, Text } from 'react-native'",
      "",
      "const ${1:Component} = () => {",
      "\tconst [${2:state}, set${2:state}] = useState('${2:state}')",
      "",
      "\treturn (",
      "\t\t<View>",
      "\t\t\t<Text>${1:Component}</Text>",
      "\t\t\t<Text>{${2:state}}</Text>",
      "\t\t</View>",
      "\t)",
      "}",
      "",
      "export default ${1:Component}"
    ],
    "description": "Initial arrow function component file with useState for React Native"
  },
  "Initial styled-components for React Native": {
    "scope": "javascript",
    "prefix": "rnsc",
    "body": [
      "import styled from 'styled-components/native'",
      "",
      "export const ${1:Container} = styled.${2:View}`",
      "\t$0",
      "`"
    ],
    "description": "Initial styled-components file for React Native"
  },
  "destructProps": {
    "scope": "javascript,javascriptreact",
    "prefix": "cp",
    "body": [
      "const { $1 } = this.props"
    ],
    "description": "Creates and assigns a local variable using props destructing inside a Class Component"
  },
  "destructState": {
    "scope": "javascript,javascriptreact",
    "prefix": "cs",
    "body": [
      "const { $1 } = this.state"
    ],
    "description": "Creates and assigns a local variable using state destructing inside a Class Component"
  },
  "useState": {
    "scope": "javascript,javascriptreact",
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ]
  },
  "useEffect": {
    "scope": "javascript,javascriptreact",
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${1:effect}",
      "  return () => {",
      "    ${3:cleanup}",
      "  }",
      "},[${2:input}])"
    ]
  },
  "useContext": {
    "scope": "javascript,javascriptreact",
    "prefix": "useContext",
    "body": [
      "const ${1:context} = useContext(${2:contextValue})"
    ]
  },
  "useReducer": {
    "scope": "javascript,javascriptreact",
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "useCallback": {
    "scope": "javascript,javascriptreact",
    "prefix": "useCallback",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:callback}",
      "  },",
      "  [${2:input}],",
      ")"
    ]
  },
  "useMemo": {
    "scope": "javascript,javascriptreact",
    "prefix": "useMemo",
    "body": [
      "useMemo(() => ${1:function}, ${2:input})"
    ]
  },
  "useRef": {
    "scope": "javascript,javascriptreact",
    "prefix": "useRef",
    "body": [
      "const ${1:ref} = useRef(${2:initialValue})"
    ]
  },
  "useLayoutEffect": {
    "scope": "javascript,javascriptreact",
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:effect}",
      "  return () => {",
      "    ${3:cleanup}",
      "  }",
      "},[${2:input}])"
    ]
  },
  "consoleLog": {
    "scope": "javascript,javascriptreact",
    "prefix": "clg",
    "body": "console.log(${1})",
    "description": "Displays a message in the console"
  },
  "consoleError": {
    "scope": "javascript,javascriptreact",
    "prefix": "cer",
    "body": "console.error(${1})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "consoleInfo": {
    "scope": "javascript,javascriptreact",
    "prefix": "cin",
    "body": "console.info(${1})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "consoleTrace": {
    "scope": "javascript,javascriptreact",
    "prefix": "ctr",
    "body": "console.trace(${1})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "consoleTime": {
    "scope": "javascript,javascriptreact",
    "prefix": "ctm",
    "body": "console.time('${1}')",
    "description": "Console time wrapper"
  },
  "consoleTimeEnd": {
    "scope": "javascript,javascriptreact",
    "prefix": "cte",
    "body": "console.timeEnd('${1}')",
    "description": "Console time end wrapper"
  },
  "consoleWarn": {
    "scope": "javascript,javascriptreact",
    "prefix": "cwa",
    "body": "console.warn(${1})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  }
}